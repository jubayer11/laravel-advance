<?php

namespace Tests\Feature;

use App\Models\TodoList;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class TodoListTest extends TestCase
{

    use refreshDatabase;

    /** @test */
    protected $list, $user,$authenticateUser;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = $this->createUser();
        $this->authenticateUser=$this->sanctumAuthenticate();
        $this->list = $this->createTodoList(['name' => 'my list','user_id'=>$this->authenticateUser->id]);

    }

    /** @test */
    public function fetch_all_todo_list()
    {

//        $this->withExceptionHandling();
        //preparation /prepare
//        TodoList::create(['name'=>'my list']);
//        $list = TodoList::factory()->count(5)->create(['name' => 'myh list']);
//        dd($list->name);
        //action /perform
        $response = $this->getJson(route('todolist.index'))->json('data');

        //assertion /predict

        $this->assertEquals(5, count($response));
        $this->assertEquals($this->list[0]->name, $response[0]['name']);
    }

    /** @test */

    public function fetch_single_todo_list()
    {

        $response = $this->getJson(route('todolist.show', $this->list[0]->id))->assertOk()->json('data');

//        $response->assertOk();
        // assertOk()= status is 200
//        $response->assertStatus(200);
        $this->assertEquals($response['name'], $this->list[0]['name']);
    }

    /** @test */
    public function store_new_todo_list()
    {
        //assertSuccessful() means status code between 200 to 300
        //$this->postJson(route('todolist.store'),['name'=>'mylist','category'=>'category'])->assertCreated();
        $list = TodoList::factory()->make();
        $this->postJson(route('todolist.store'), ['name' => $list->name, 'category' => $list->category])->assertCreated();

        $this->assertDatabaseHas('todo_lists', ['name' => $list->name]);

    }


    /** @test */

    public function while_storing_check_validation_name_is_required()
    {
        $this->withExceptionHandling();
        $this->postJson(route('todolist.store'))->assertStatus(422)->json();
    }


    /** @test */
    public function delete_todo_list()
    {
        $this->deleteJson(route('todolist.destroy', $this->list[0]['id']))->assertNoContent();
        $this->assertDatabaseMissing('todo_lists', ['id' => $this->list[0]['id']]);
    }

    /** @test */

    public function update_todo_list()
    {
        $this->putJson(route('todolist.update', $this->list[1]['id']), ['name' => 'my list updated'])->assertOk();
        $this->assertDatabaseHas('todo_lists', ['id' => $this->list[1]->id, 'name' => 'my list updated']);

    }

    /** @test */

    public function while_updating_check_validation_name_is_required()
    {
        $this->withExceptionHandling();
        $this->putJson(route('todolist.update', $this->list[1]['id']))->assertStatus(422)->json();
    }


}
