<?php

namespace Tests\Feature;

use App\Models\Task;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class TaskTest extends TestCase
{
    /**
     * A basic feature test example.
     *
     * @return void
     */
    use refreshDatabase;

    protected $task;
    protected $list;
    protected $label;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->task = $this->createTaskList('');
        $this->list = $this->createTodoList('');
        $this->label = $this->createLabel('');
        $this->sanctumAuthenticate();
    }

    public function test_fetch_all_tasks_of_a_todo_list()
    {
        $response = $this->getJson(route('todolist.task.index', $this->list[0]['id']))->assertOk()->json();

        $this->assertEquals(10, count($response));
        $this->assertEquals($this->task[0]['title'], $response[0]['title']);
    }

    public function test_store_tasks_of_a_todo_list()
    {

        $task = Task::factory()->make();
        $response = $this->postJson(route('todolist.task.store', $this->list[0]['id']), ['title' => $task->title,'label_id'=>$this->label->id])->assertCreated()->json();

        $this->assertEquals($task->title, $response['title']);
        $this->assertDatabaseHas('tasks', ['title' => $task->title, 'label_id' => $this->label->id]);
    }

//    public function test_store_tasks_of_a_todo_list_without_a_label()
//    {
//        $task = Task::factory()->make();
//        $response = $this->postJson(route('todolist.task.store', $this->list[0]['id']), ['title' => $task->title])->assertCreated()->json();
//
//        $this->assertEquals($task->title, $response['title']);
//        $this->assertDatabaseHas('tasks', ['title' => $task->title, 'label_id' => $this->label->id]);

//    }

    public function test_delete_a_task_from_database()
    {
        $this->deleteJson(route('task.destroy', $this->task[0]['id']))->assertNoContent();
        $this->assertDatabaseMissing('tasks', ['id' => $this->task[0]['id']]);
    }

    public function test_update_a_task_from_database()
    {
        $this->patchJson(route('task.update', $this->task[1]['id']), ['title' => 'hello honey'])->assertOk()->json();

        $this->assertDatabaseHas('tasks', ['title' => 'hello honey']);
    }


}
